//========================================================//
//     Copyright 2005, Analytical Graphics, Inc.          //
//========================================================//
using Microsoft.Win32;
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

using AGI.Attr;
using AGI.Plugin;
using AGI.Astrogator;
using AGI.Astrogator.Plugin;
using AGI.STK.Plugin;

namespace AGI.Astrogator.Plugin.Examples.AttitudeControl.CSharp
{
	/// <summary>
	/// Example1 Gator Attitude Control
	/// </summary>
	// NOTE: Generate your own Guid using Microsoft's GuidGen.exe
	// If you used this plugin in STK 6, 7 you should create a new
	// copy of your plugin's source, and update it with a new GUID
	// for STK 8.  Then you will be able to make changes in the 
	// new STK 8 plugin and not affect your old STK 6,7 plugin.
	[Guid("3462B360-3272-4ac0-B72D-B23EE8163BC4")]
	// NOTE: Create your own ProgId to match your plugin's namespace and name
	[ProgId("AGI.Astrogator.Plugin.Examples.AttitudeControl.CSharp.Example1")]
	// NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
	// you created, i.e. IExample1, is used instead of an autogenerated COM Interface.
	[ClassInterface(ClassInterfaceType.None)]
	public class Example1 :
		IExample1,
		IAgGatorPluginAttCtrl,
		IAgUtPluginConfig
	{
		#region Data Members
			
		private IAgUtPluginSite			m_UtPluginSite = null;
		private double					m_InitTime	= 0;
		private object					m_AttrScope = null;
		private AgGatorPluginProvider	m_gatorPrv = null;
		private AgGatorConfiguredCalcObject	m_argOfLat = null;

		#endregion

		#region Life Cycle Methods
		/// <summary>
		/// Constructor
		/// </summary>
		public Example1()
		{
			try
			{
				Debug.WriteLine( "Entered", "Example1()");

			}
			finally
			{
				Debug.WriteLine( "Exited", "Example1()");
			}
		}

		/// <summary>
		/// Destructor
		/// </summary>
		~Example1()
		{
			try
			{
				Debug.WriteLine( "Entered", "~Example1()");
			}
			finally
			{
				Debug.WriteLine( "Exited", "~Example1()");
			}
		}

		private void Message( AgEUtLogMsgType msgType, string msg )
		{
			if( this.m_UtPluginSite != null )
			{
				this.m_UtPluginSite.Message( msgType, msg );
			}
		}
		#endregion

		#region IExample1 Interface Implementation

		private string	m_Name		= "Gator.AttCtrl.CSharp.Example1";	// Plugin Significant
		private double	m_y0		= 0;
		private double	m_y1		= 0.0001;
		private double	m_y2		= 0.0000001;
		private double  m_ys		= 0;
		private double  m_yc		= 0;
		private double	m_p0		= 0;
		private double	m_p1		= 0.0002;
		private double	m_p2		= 0.00000001;
		private double  m_ps		= 0;
		private double  m_pc		= 0;
		
		public string Name
		{
			get
			{
				return this.m_Name;
			}
			set
			{
				this.m_Name = value;
			}
		}

		public double y0
		{
			get
			{
				return this.m_y0;
			}
			set
			{
				this.m_y0 = value;
			}
		}

		public double y1
		{
			get
			{
				return this.m_y1;
			}
			set
			{
				this.m_y1 = value;
			}
		}

		public double y2
		{
			get
			{
				return this.m_y2;
			}
			set
			{
				this.m_y2 = value;
			}
		}
		
		public double ys
		{
			get
			{
				return this.m_ys;
			}
			set
			{
				this.m_ys = value;
			}
		}

		public double yc
		{
			get
			{
				return this.m_yc;
			}
			set
			{
				this.m_yc = value;
			}
		}
		
		public double p0
		{
			get
			{
				return this.m_p0;
			}
			set
			{
				this.m_p0 = value;
			}
		}
		
		public double p1
		{
			get
			{
				return this.m_p1;
			}
			set
			{
				this.m_p1 = value;
			}
		}
		
		public double p2
		{
			get
			{
				return this.m_p2;
			}
			set
			{
				this.m_p2 = value;
			}
		}

		public double ps
		{
			get
			{
				return this.m_ps;
			}
			set
			{
				this.m_ps = value;
			}
		}

		public double pc
		{
			get
			{
				return this.m_pc;
			}
			set
			{
				this.m_pc = value;
			}
		}

		#endregion

        #region IAgGatorPluginAttCtrl Interface Implemenation
        public bool Init( IAgUtPluginSite site)
		{
			this.m_UtPluginSite = site;

			if (this.m_UtPluginSite != null)
			{
				this.m_gatorPrv = ( (IAgGatorPluginSite)(this.m_UtPluginSite) ).GatorProvider;

				if (this.m_gatorPrv !=null)
				{
					this.m_argOfLat = this.m_gatorPrv.ConfigureCalcObject("Argument_of_Latitude");

					if (this.m_argOfLat != null)
					{
						return true;
					}
				}
			}
	
			return false;
		}


		public bool PrePropagate( AgGatorPluginResultAttCtrl result )
		{
			if( result != null )
			{
                result.SetRefAxes("Satellite VNC(Earth)");

				int WholeDays = 0;
				double SecIntoDay = 0;
				result.DayCount( AgEUtTimeScale.eUtTimeScaleSTKEpochSec, ref WholeDays, ref SecIntoDay);
				this.m_InitTime = WholeDays * 86400.0 + SecIntoDay;
			}

			return true;
		}

		public bool PreNextStep( AgGatorPluginResultAttCtrl result )
		{
			return true;
		}

		public bool Evaluate( AgGatorPluginResultAttCtrl result )
		{
			if( result != null )
			{
				double time;
				double yawAngle;
				double pitchAngle;
				double deltaT;
				double argOfLat;

				int WholeDays = 0;
				double SecIntoDay = 0;
				result.DayCount( AgEUtTimeScale.eUtTimeScaleSTKEpochSec, ref WholeDays, ref SecIntoDay);
				time = WholeDays * 86400.0 + SecIntoDay;
			
				deltaT = time - this.m_InitTime;

				argOfLat = this.m_argOfLat.Evaluate(result);
			
				yawAngle = y0 + ( y1 * deltaT ) + ( y2 * deltaT * deltaT ) + ( ys * Math.Sin(argOfLat) ) + ( yc * Math.Cos(argOfLat) );
			
				pitchAngle = p0 + ( p1 * deltaT ) + ( p2 * deltaT * deltaT ) + ( ps * Math.Sin(argOfLat) ) + ( pc * Math.Cos(argOfLat) );
			
				result.EulerRotate( AgEEulerSequence.e321, yawAngle, pitchAngle, 0 );
			}

			return true;
		}

		public void Free()
		{
			// do nothing
		}
		#endregion

		#region IAgUtPluginConfig Interface Implementation
		public object GetPluginConfig( AgAttrBuilder builder )
		{
			try
			{
				Debug.WriteLine( "--> Entered", "GetPluginConfig()");

				if( builder != null )
				{
					if( this.m_AttrScope == null )
					{
						this.m_AttrScope = builder.NewScope();
				
						//====================
						// General Attributes
						//====================
						builder.AddStringDispatchProperty( this.m_AttrScope, "PluginName", "Human readable plugin name or alias", "Name", (int)AgEAttrAddFlags.eAddFlagReadOnly );
				
						//================
						// Yaw Attributes
						//================
						builder.AddDoubleDispatchProperty( this.m_AttrScope, "Y0", "Initial Yaw", "y0", (int)AgEAttrAddFlags.eAddFlagNone );
						builder.AddDoubleDispatchProperty( this.m_AttrScope, "Y1", "Linear Yaw Coefficient", "y1", (int)AgEAttrAddFlags.eAddFlagNone );
						builder.AddDoubleDispatchProperty( this.m_AttrScope, "Y2", "Quadratic Yaw Coefficient", "y2", (int)AgEAttrAddFlags.eAddFlagNone );
						builder.AddDoubleDispatchProperty( this.m_AttrScope, "Ys", "Sine Yaw Coefficient", "ys", (int)AgEAttrAddFlags.eAddFlagNone );
						builder.AddDoubleDispatchProperty( this.m_AttrScope, "Yc", "Cosine Yaw Coefficient", "yc", (int)AgEAttrAddFlags.eAddFlagNone );

						builder.AddDoubleDispatchProperty( this.m_AttrScope, "P0", "Initial Pitch", "p0", (int)AgEAttrAddFlags.eAddFlagNone );
						builder.AddDoubleDispatchProperty( this.m_AttrScope, "P1", "Linear Pitch Coefficient", "p1", (int)AgEAttrAddFlags.eAddFlagNone );
						builder.AddDoubleDispatchProperty( this.m_AttrScope, "P2", "Quadratic Pitch Coefficient", "p2", (int)AgEAttrAddFlags.eAddFlagNone );
						builder.AddDoubleDispatchProperty( this.m_AttrScope, "Ps", "Sine Pitch Coefficient", "ps", (int)AgEAttrAddFlags.eAddFlagNone );
						builder.AddDoubleDispatchProperty( this.m_AttrScope, "Pc", "Cosine Pitch Coefficient", "pc", (int)AgEAttrAddFlags.eAddFlagNone );
					}

					string config;
					config = builder.ToString( this, this.m_AttrScope );
					Debug.WriteLine( "\n" + config, "GetPluginConfig()" );
				}
			}
			finally
			{
				Debug.WriteLine( "<-- Exited", "GetPluginConfig()");
			}

			return this.m_AttrScope;
		}

		public void VerifyPluginConfig( AgUtPluginConfigVerifyResult result )
		{
			try
			{
				Debug.WriteLine( "Entered", "VerifyPluginConfig()");

				// TODO:  Add any Minimum/Maximum checks to the Yaw and Pitch here.

				result.Result	= true;
				result.Message	= "Ok";
			}
			finally
			{
				Debug.WriteLine( "Exited", "VerifyPluginConfig()" );
			}
		}
		#endregion

        #region Registration functions
        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        [ComRegisterFunction]
        [ComVisible(false)]
        public static void RegisterFunction(Type t)
        {
            RemoveOtherVersions(t);
        }

        /// <summary>
        /// Called when the assembly is unregistered for use from COM.
        /// </summary>
        /// <param name="t">The type exposed to COM.</param>
        [ComUnregisterFunctionAttribute]
        [ComVisible(false)]
        public static void UnregisterFunction(Type t)
        {
            // Do nothing.
        }

        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// Eliminates the other versions present in the registry for
        /// this type.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        public static void RemoveOtherVersions(Type t)
        {
            try
            {
                using (RegistryKey clsidKey = Registry.ClassesRoot.OpenSubKey("CLSID"))
                {
                    StringBuilder guidString = new StringBuilder("{");
                    guidString.Append(t.GUID.ToString());
                    guidString.Append("}");
                    using (RegistryKey guidKey = clsidKey.OpenSubKey(guidString.ToString()))
                    {
                        if (guidKey != null)
                        {
                            using (RegistryKey inproc32Key = guidKey.OpenSubKey("InprocServer32", true))
                            {
                                if (inproc32Key != null)
                                {
                                    string currentVersion = t.Assembly.GetName().Version.ToString();
                                    string[] subKeyNames = inproc32Key.GetSubKeyNames();
                                    if (subKeyNames.Length > 1)
                                    {
                                        foreach (string subKeyName in subKeyNames)
                                        {
                                            if (subKeyName != currentVersion)
                                            {
                                                inproc32Key.DeleteSubKey(subKeyName);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
                // Ignore all exceptions...
            }
        }
        #endregion
	}
}
//========================================================//
//     Copyright 2005, Analytical Graphics, Inc.          //
//========================================================//