'//=====================================================//
'//  Copyright 2007, Analytical Graphics, Inc.          //
'//=====================================================//

Option Strict On
Option Explicit On 
Imports System.EnterpriseServices
Imports System.Runtime.InteropServices
Imports Microsoft.Win32.RegistryKey

Imports AGI.Attr
Imports AGI.Plugin
'Imports AGI.VectorGeometryTool.Plugin
Imports AGI.Access.Constraint.Plugin
Imports AGI.STK.Plugin
Imports AGI.STKObjects
Imports AGI.STKUtil


' NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    ' NOTE: Create your own ProgId to match your plugin's namespace and name
    ' NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
' you created, i.e. RangeExample, is used instead of an autogenerated COM Interface.

<JustInTimeActivation(True), _
GuidAttribute("55DB949F-F234-4108-84E8-372EEDBF0AD8"), _
ProgId("AGI.Access.Constraint.Plugin.Examples.VB_NET.RangeExample"), _
ClassInterface(ClassInterfaceType.None)> _
Public Class RangeExample
    Implements IAgAccessConstraintPlugin

#Region "Data Members"

    Private m_Site As IAgStkPluginSite
    Private m_StkRootObject As AgStkObjectRoot
    Private m_DisplayName As String

#End Region

    ' Default constructor.
    Public Sub New()
        MyBase.New()

        m_Site = Nothing
        m_StkRootObject = Nothing
        m_DisplayName = "VB_NET.RangeExample"

    End Sub

    Private Sub Message(ByVal severity As AGI.Plugin.AgEUtLogMsgType, ByRef msg As String)

        If (Not m_Site Is Nothing And IsReference(m_Site)) Then

            m_Site.Message(severity, msg)

        End If

    End Sub


#Region "IAgAccessConstraintPlugin Interface Implementation"

    Public ReadOnly Property DisplayName() As String Implements IAgAccessConstraintPlugin.DisplayName
        Get
            Return m_DisplayName
        End Get
    End Property

    Public Function Init(ByVal Site As IAgUtPluginSite) As Boolean Implements IAgAccessConstraintPlugin.Init

        Dim TriggerName As String
        TriggerName = m_DisplayName & ".Init()"

        Try
            m_Site = CType(Site, IAgStkPluginSite)

            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgDebug, TriggerName)

            ' Demonstrate getting ObjectModel handle

            If (Not m_Site Is Nothing And IsReference(m_Site)) Then

                ' Get a pointer to the STK Object Model root object

                m_StkRootObject = DirectCast(m_Site.StkRootObject, AgStkObjectRoot)

            End If

        Catch ex As Exception
            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception Message( " & ex.Message & " )")
            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception StackTr( " & ex.StackTrace & " )")
        End Try

        Init = True

    End Function

    Public Sub Register(ByVal Result As AgAccessConstraintPluginResultRegister) Implements IAgAccessConstraintPlugin.Register

        Result.BaseObjectType = AgEAccessConstraintObjectType.eAircraft
        Result.BaseDependency = CInt(AgEAccessConstraintDependencyFlags.eDependencyRelativePosVel)
        Result.Dimension = "Distance"
        Result.MinValue = 0.0

        Result.TargetDependency = CInt(AgEAccessConstraintDependencyFlags.eDependencyRelativePosVel)
        Result.AddTarget(AgEAccessConstraintObjectType.eFacility)
        Result.AddTarget(AgEAccessConstraintObjectType.eGroundVehicle)
        Result.AddTarget(AgEAccessConstraintObjectType.eSatellite)
        Result.Register()

        Result.Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgInfo, m_DisplayName & ": Register(Aircraft to Facility/GroundVehicle/Satellite)")

        Result.BaseObjectType = AgEAccessConstraintObjectType.eFacility
        Result.ClearTargets()
        Result.AddTarget(AgEAccessConstraintObjectType.eAircraft)
        Result.AddTarget(AgEAccessConstraintObjectType.eSatellite)
        Result.Register()

        Result.Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgInfo, m_DisplayName & ": Register(Facility to Aircraft/Satellite)")

        Result.BaseObjectType = AgEAccessConstraintObjectType.eGroundVehicle
        Result.Register()

        Result.Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgInfo, m_DisplayName & ": Register(GroundVehicle to Aircraft/Satellite)")

        Result.BaseObjectType = AgEAccessConstraintObjectType.eSatellite
        Result.ClearTargets()
        Result.AddTarget(AgEAccessConstraintObjectType.eAircraft)
        Result.AddTarget(AgEAccessConstraintObjectType.eFacility)
        Result.AddTarget(AgEAccessConstraintObjectType.eGroundVehicle)
        Result.Register()

        Result.Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgInfo, m_DisplayName & ": Register(Satellite to Aircraft/Facility/GroundVehicle)")
    End Sub

    Public Function PreCompute(ByVal Result As AgAccessConstraintPluginResultPreCompute) As Boolean Implements IAgAccessConstraintPlugin.PreCompute

        Dim TriggerName As String
        TriggerName = m_DisplayName & ".PreCompute()"

        Try

            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgDebug, TriggerName)

            ' Demonstrate using ObjectModel handle

            If (Not m_StkRootObject Is Nothing And IsReference(m_StkRootObject)) Then

                Dim scenObj As IAgStkObject

                scenObj = m_StkRootObject.CurrentScenario

                If (Not scenObj Is Nothing And IsReference(scenObj)) Then

                    Dim scenName As String

                    scenName = scenObj.InstanceName

                    Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgInfo, "Current Scenario is " & scenName)
                End If

            End If

        Catch ex As Exception
            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception Message( " & ex.Message & " )")
            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception StackTr( " & ex.StackTrace & " )")
        End Try

        PreCompute = True

    End Function

    Public Function Evaluate(ByVal Result As AgAccessConstraintPluginResultEval, _
                             ByVal fromObject As AgAccessConstraintPluginObjectData, _
                             ByVal toObject As AgAccessConstraintPluginObjectData) _
                             As Boolean Implements IAgAccessConstraintPlugin.Evaluate

        Dim TriggerName As String
        TriggerName = m_DisplayName & ".Evaluate()"

        Try
            If (Not Result Is Nothing And IsReference(Result)) Then

                Result.Value = Result.LightPathRange

            End If

        Catch ex As Exception
            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception Message( " & ex.Message & " )")
            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception StackTr( " & ex.StackTrace & " )")
        End Try

        Evaluate = True

    End Function

    Public Function PostCompute(ByVal Result As AgAccessConstraintPluginResultPostCompute) As Boolean Implements IAgAccessConstraintPlugin.PostCompute

        Dim TriggerName As String
        TriggerName = m_DisplayName & ".PostCompute()"

        Try

            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgDebug, TriggerName)

        Catch ex As Exception
            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception Message( " & ex.Message & " )")
            Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception StackTr( " & ex.StackTrace & " )")
        End Try

        PostCompute = True

    End Function

    Public Sub Free() Implements IAgAccessConstraintPlugin.Free

        Dim TriggerName As String
        TriggerName = m_DisplayName & ".Free()"

        Try

            If (Not m_Site Is Nothing And IsReference(m_Site)) Then

                Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgDebug, TriggerName)

                Marshal.ReleaseComObject(m_Site)
            End If
            m_Site = Nothing

            If (Not m_StkRootObject Is Nothing And IsReference(m_StkRootObject)) Then
                Marshal.ReleaseComObject(m_StkRootObject)
            End If
            m_StkRootObject = Nothing

        Catch ex As Exception
            If (Not m_Site Is Nothing And IsReference(m_Site)) Then
                Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception Message( " & ex.Message & " )")
                Message(AGI.Plugin.AgEUtLogMsgType.eUtLogMsgAlarm, TriggerName & ": Exception StackTr( " & ex.StackTrace & " )")
            End If
        End Try

    End Sub

#End Region


End Class


'//=====================================================//
'//  Copyright 2007, Analytical Graphics, Inc.          //
'//=====================================================//