//=====================================================//
//  Copyright 2009         //
//=====================================================//
using Microsoft.Win32;
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

using AGI.Attr;
using AGI.Plugin;
using AGI.Hpop.Plugin;
using AGI.VectorGeometryTool.Plugin;
using AGI.STK.Plugin;

namespace AGI.EOMFunc.Plugin.Examples.Stk.CSharp
{
	/// <summary>
	/// MYPLUGIN class provides an empty force model plugin 
	/// </summary>
	// NOTE: Generate your own Guid using Microsoft's GuidGen.exe.
	// When updating to a new major version of STK (e.g. STK 9 to STK 10),
    // you should create a new copy of your plugin's source, and update it with a new GUID.
	// Then you will be able to make changes in the plugin for the new STK version and not 
    // affect the old plugin used in prior STK releases.
	[Guid("B070803F-5DFE-4539-B6F4-638B7AA413FF")]
	// NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("AGI.EOMFunc.Plugin.Examples.Stk.CSharp.MyEOMFunc")]
	// NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
	// you created, i.e. IMYPLUGIN, is used instead of an autogenerated COM Interface.
	[ClassInterface(ClassInterfaceType.None)]
	public class MyEOMFunc :
		IMyEOMFunc,
		IAgAsEOMFuncPlugin,
		IAgUtPluginConfig
	{
		#region Plugin Private Data Members

		// site interface
		private IAgUtPluginSite			m_UPS;
        private IAgStkPluginSite        m_SPS;
        private IAgCrdnPluginProvider   m_CPP;
        private IAgCrdnConfiguredAxes   m_CCA;

        private string m_Name;	

        private string m_deltaVAxes = "VNC(Earth)";
        private int m_thrustXIndex;
        private int m_thrustYIndex;
        private int m_thrustZIndex;
        private int m_massIndex;

        private int m_effectiveImpulseIndex;
        private int m_integratedDeltaVxIndex;
        private int m_integratedDeltaVyIndex;
        private int m_integratedDeltaVzIndex;

		// plugin parameter data
		private object					m_Scope;

		#endregion

		#region Messaging Code

		private void Message (AgEUtLogMsgType severity, String msgStr)
		{
			if(  m_UPS != null )
			{
				m_UPS.Message( severity, msgStr);
			}
		}

		#endregion

		#region Life Cycle Methods

		public MyEOMFunc() : base()
		{
			try
			{
                m_Name = "MyEOMFunc"; 
                
                m_UPS = null;
				m_Scope = null;

			}
			finally
			{
			}
		}

		#endregion
		
		#region IMyEOMFunc Interface Implementation
		//=============================================
		// Plugin Attributes to be configured
		// will be exposed via .NET properties
		// and using the Attribute Builder reference
		// passed as a parameter to the GetPluginConfig
		// Method.
		//==============================================

        public string Name
        {
            get
            {
                return m_Name;
            }
            set
            {
                m_Name = value;
            }
        }

        public string DeltaVAxes
		{
			get
			{
                return m_deltaVAxes ;
			}
			set
			{
                m_deltaVAxes = value;
			}
		}

		#endregion

		#region IAgAsEOMFuncPlugin Interface Implementation

		public bool Init( IAgUtPluginSite Ups )
		{
			m_UPS = Ups;

            if (m_UPS != null)
            {
                m_SPS = m_UPS as IAgStkPluginSite;

                if (m_SPS != null)
                {
                    m_CPP = m_SPS.VectorToolProvider;

                    if (m_CPP != null)
                    {
                        m_CCA = m_CPP.ConfigureAxes("ICRF", "CentralBody/Earth", m_deltaVAxes, "");

                        if (m_CCA != null)
                        {
                            return true;
                        }
                    }
                }
            }
                
			return false;
		}

		public bool Register(AgAsEOMFuncPluginRegisterHandler Register )
		{
            bool ret = true;

			try
			{
                // plugin needs the thrust vector and the mass
                Register.RegisterInput(AgEAsEOMFuncPluginInputStateValues.AgEAsEOMFuncPluginInputStateValuesThrustX);
                Register.RegisterInput(AgEAsEOMFuncPluginInputStateValues.AgEAsEOMFuncPluginInputStateValuesThrustY);
                Register.RegisterInput(AgEAsEOMFuncPluginInputStateValues.AgEAsEOMFuncPluginInputStateValuesThrustZ);

                Register.RegisterInput(AgEAsEOMFuncPluginInputStateValues.AgEAsEOMFuncPluginInputStateValuesTotalMass);

                // plugin gives the derivative of effective impulse and integrated delta-V
                Register.RegisterUserDerivativeOutput("EffectiveImpulse");
                Register.RegisterUserDerivativeOutput("IntegratedDeltaVx");
                Register.RegisterUserDerivativeOutput("IntegratedDeltaVy");
                Register.RegisterUserDerivativeOutput("IntegratedDeltaVz");

                // plugin only needs to be called on evaluate
                Register.ExcludeEvent(AgEAsEOMFuncPluginEventTypes.AgEAsEOMFuncPluginEventTypesPrePropagate);
                Register.ExcludeEvent(AgEAsEOMFuncPluginEventTypes.AgEAsEOMFuncPluginEventTypesPreNextStep);
                Register.ExcludeEvent(AgEAsEOMFuncPluginEventTypes.AgEAsEOMFuncPluginEventTypesPostPropagate);
			}
			catch( Exception ex )
			{
                ret = false;

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
                    m_Name + ".Register(): Exception Message( " + ex.Message + " )");

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
                    m_Name + ".Register(): Exception StackTr( " + ex.StackTrace + " )");
			}
			finally
			{
			}

			return ret;
		}

		public bool SetIndices(AgAsEOMFuncPluginSetIndicesHandler SetIndices )
		{
            bool ret = true;

			try
			{
                // get the indices for the input variables
                m_thrustXIndex = SetIndices.GetInputIndex(AgEAsEOMFuncPluginInputStateValues.AgEAsEOMFuncPluginInputStateValuesThrustX);
                m_thrustYIndex = SetIndices.GetInputIndex(AgEAsEOMFuncPluginInputStateValues.AgEAsEOMFuncPluginInputStateValuesThrustY);
                m_thrustZIndex = SetIndices.GetInputIndex(AgEAsEOMFuncPluginInputStateValues.AgEAsEOMFuncPluginInputStateValuesThrustZ);
                m_massIndex = SetIndices.GetInputIndex(AgEAsEOMFuncPluginInputStateValues.AgEAsEOMFuncPluginInputStateValuesTotalMass);

                // get the indices for the derivatives we will output
                m_effectiveImpulseIndex = SetIndices.GetUserDerivativeOutputIndex("EffectiveImpulse");
                m_integratedDeltaVxIndex = SetIndices.GetUserDerivativeOutputIndex("IntegratedDeltaVx");
                m_integratedDeltaVyIndex = SetIndices.GetUserDerivativeOutputIndex("IntegratedDeltaVy");
                m_integratedDeltaVzIndex = SetIndices.GetUserDerivativeOutputIndex("IntegratedDeltaVz");
            }
			catch( Exception ex )
			{
				ret = false;

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
                    m_Name + ".SetIndices(): Exception Message( " + ex.Message + " )");

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
                    m_Name + ".SetIndices(): Exception StackTr( " + ex.StackTrace + " )");
			}
			finally
			{
			}

			return ret;
		}

		public bool Calc(AgEAsEOMFuncPluginEventTypes eventType, AgAsEOMFuncPluginStateVector StateVector )
		{
            bool ret = true;

			try
			{
                // get the current thrust values, and give back the derivatives of
                // effective impulse and the integrated delta V components

                // get thrust
                double thrustX = StateVector.GetInputValue(m_thrustXIndex);
                double thrustY = StateVector.GetInputValue(m_thrustYIndex);
                double thrustZ = StateVector.GetInputValue(m_thrustZIndex);

                // get mass
                double mass = StateVector.GetInputValue(m_massIndex);


                // derivative of effective impulse is the total thrust magnitude
                double thrustMag = Math.Sqrt(thrustX * thrustX + thrustY * thrustY + thrustZ * thrustZ);
                StateVector.AddDerivativeOutputValue(m_effectiveImpulseIndex, thrustMag);

                // rotate thrust vector to desired integration frame for integrated delta-V
                m_CCA.TransformComponents(StateVector,ref thrustX,ref thrustY,ref thrustZ);

                // the derivative of each integrated delta-V component is that component of thrust acceleration 
                StateVector.AddDerivativeOutputValue(m_integratedDeltaVxIndex, thrustX / mass);
                StateVector.AddDerivativeOutputValue(m_integratedDeltaVyIndex, thrustY / mass);
                StateVector.AddDerivativeOutputValue(m_integratedDeltaVzIndex, thrustZ / mass);
            }
			catch( Exception ex )
			{
				ret = false;

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Calc(): Exception Message( " + ex.Message + " )" );

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Calc(): Exception StackTr( " + ex.StackTrace + " )" );
			}
			finally
			{
			}

			return ret;

		}

		public void Free()
		{
			try
			{
				if( m_UPS != null)
				{
					Marshal.ReleaseComObject( m_UPS );
				}
				m_UPS = null;
			}
			catch( Exception ex )
			{
				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Free(): Exception Message( " + ex.Message + " )" );

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
                    m_Name + ".Free(): Exception StackTr( " + ex.StackTrace + " )");
			}
			finally
			{
			}
		}
		#endregion

		#region IAgUtPluginConfig Interface Implementation

		public object GetPluginConfig( AgAttrBuilder aab )
		{
			try
			{
				if( m_Scope == null )
				{
					m_Scope = aab.NewScope();
				
					//===========================
					// General Plugin attributes
					//===========================
					aab.AddStringDispatchProperty( 
						m_Scope, 
						"DeltaVAxes",
                        "Axes in which to integrate delta-V", 
						"DeltaVAxes", 
						(int)AgEAttrAddFlags.eAddFlagNone );					
				}

				string config;
				config = aab.ToString( this, m_Scope );
			}
			finally
			{
			}

			return m_Scope;
		}

		public void VerifyPluginConfig( AgUtPluginConfigVerifyResult apcvr )
		{
			bool	result	= true;
			string	message = "Ok";

			apcvr.Result	= result;
			apcvr.Message	= message;
		}
		#endregion

        #region Registration functions
        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        [ComRegisterFunction]
        [ComVisible(false)]
        public static void RegisterFunction(Type t)
        {
            RemoveOtherVersions(t);
        }

        /// <summary>
        /// Called when the assembly is unregistered for use from COM.
        /// </summary>
        /// <param name="t">The type exposed to COM.</param>
        [ComUnregisterFunctionAttribute]
        [ComVisible(false)]
        public static void UnregisterFunction(Type t)
        {
            // Do nothing.
        }

        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// Eliminates the other versions present in the registry for
        /// this type.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        public static void RemoveOtherVersions(Type t)
        {
            try
            {
                using (RegistryKey clsidKey = Registry.ClassesRoot.OpenSubKey("CLSID"))
                {
                    StringBuilder guidString = new StringBuilder("{");
                    guidString.Append(t.GUID.ToString());
                    guidString.Append("}");
                    using (RegistryKey guidKey = clsidKey.OpenSubKey(guidString.ToString()))
                    {
                        if (guidKey != null)
                        {
                            using (RegistryKey inproc32Key = guidKey.OpenSubKey("InprocServer32", true))
                            {
                                if (inproc32Key != null)
                                {
                                    string currentVersion = t.Assembly.GetName().Version.ToString();
                                    string[] subKeyNames = inproc32Key.GetSubKeyNames();
                                    if (subKeyNames.Length > 1)
                                    {
                                        foreach (string subKeyName in subKeyNames)
                                        {
                                            if (subKeyName != currentVersion)
                                            {
                                                inproc32Key.DeleteSubKey(subKeyName);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
                // Ignore all exceptions...
            }
        }
        #endregion
	}
}
//=====================================================//
//  Copyright 2009         //
//=====================================================//
